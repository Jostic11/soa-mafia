# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GoSingUp = channel.unary_unary(
                '/mafia.Mafia/GoSingUp',
                request_serializer=mafia__pb2.SingUp.SerializeToString,
                response_deserializer=mafia__pb2.SingUpResponse.FromString,
                )
        self.SubscribeToNotifications = channel.unary_stream(
                '/mafia.Mafia/SubscribeToNotifications',
                request_serializer=mafia__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=mafia__pb2.SubscribeResponse.FromString,
                )
        self.DisconectRoom = channel.unary_unary(
                '/mafia.Mafia/DisconectRoom',
                request_serializer=mafia__pb2.SingUp.SerializeToString,
                response_deserializer=mafia__pb2.Empty.FromString,
                )
        self.ConnectRoom = channel.unary_unary(
                '/mafia.Mafia/ConnectRoom',
                request_serializer=mafia__pb2.SingUp.SerializeToString,
                response_deserializer=mafia__pb2.SingUpResponse.FromString,
                )
        self.DeadSignal = channel.unary_unary(
                '/mafia.Mafia/DeadSignal',
                request_serializer=mafia__pb2.SingUp.SerializeToString,
                response_deserializer=mafia__pb2.Empty.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GoSingUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconectRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeadSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GoSingUp': grpc.unary_unary_rpc_method_handler(
                    servicer.GoSingUp,
                    request_deserializer=mafia__pb2.SingUp.FromString,
                    response_serializer=mafia__pb2.SingUpResponse.SerializeToString,
            ),
            'SubscribeToNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToNotifications,
                    request_deserializer=mafia__pb2.SubscribeRequest.FromString,
                    response_serializer=mafia__pb2.SubscribeResponse.SerializeToString,
            ),
            'DisconectRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconectRoom,
                    request_deserializer=mafia__pb2.SingUp.FromString,
                    response_serializer=mafia__pb2.Empty.SerializeToString,
            ),
            'ConnectRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectRoom,
                    request_deserializer=mafia__pb2.SingUp.FromString,
                    response_serializer=mafia__pb2.SingUpResponse.SerializeToString,
            ),
            'DeadSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.DeadSignal,
                    request_deserializer=mafia__pb2.SingUp.FromString,
                    response_serializer=mafia__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mafia.Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GoSingUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/GoSingUp',
            mafia__pb2.SingUp.SerializeToString,
            mafia__pb2.SingUpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mafia.Mafia/SubscribeToNotifications',
            mafia__pb2.SubscribeRequest.SerializeToString,
            mafia__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisconectRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/DisconectRoom',
            mafia__pb2.SingUp.SerializeToString,
            mafia__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/ConnectRoom',
            mafia__pb2.SingUp.SerializeToString,
            mafia__pb2.SingUpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeadSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/DeadSignal',
            mafia__pb2.SingUp.SerializeToString,
            mafia__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
